// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: queries.sql

package sqlc_models

import (
	"context"
)

const getUser = `-- name: GetUser :one
SELECT id, email, encrypted_password, reset_password_token, reset_password_sent_at, remember_created_at, sign_in_count, current_sign_in_at, last_sign_in_at, created_at, updated_at, name, deactivated_at, is_admin, avatar_kind, uploaded_avatar_file_name, uploaded_avatar_content_type, uploaded_avatar_file_size, uploaded_avatar_updated_at, avatar_initials, username, email_when_proposal_closing_soon, authentication_token, unsubscribe_token, memberships_count, uses_markdown, selected_locale, time_zone, key, detected_locale, email_catch_up, email_api_key, email_when_mentioned, email_on_participation, default_membership_volume, country, region, city, experiences, facebook_community_id, slack_community_id, remember_token, short_bio, email_verified, location, last_seen_at, legal_accepted_at, email_newsletter, failed_attempts, unlock_token, locked_at, short_bio_format, attachments, current_sign_in_ip, last_sign_in_ip, secret_token, content_locale, bot, link_previews, email_catch_up_day, date_time_pref FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.EncryptedPassword,
		&i.ResetPasswordToken,
		&i.ResetPasswordSentAt,
		&i.RememberCreatedAt,
		&i.SignInCount,
		&i.CurrentSignInAt,
		&i.LastSignInAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.DeactivatedAt,
		&i.IsAdmin,
		&i.AvatarKind,
		&i.UploadedAvatarFileName,
		&i.UploadedAvatarContentType,
		&i.UploadedAvatarFileSize,
		&i.UploadedAvatarUpdatedAt,
		&i.AvatarInitials,
		&i.Username,
		&i.EmailWhenProposalClosingSoon,
		&i.AuthenticationToken,
		&i.UnsubscribeToken,
		&i.MembershipsCount,
		&i.UsesMarkdown,
		&i.SelectedLocale,
		&i.TimeZone,
		&i.Key,
		&i.DetectedLocale,
		&i.EmailCatchUp,
		&i.EmailApiKey,
		&i.EmailWhenMentioned,
		&i.EmailOnParticipation,
		&i.DefaultMembershipVolume,
		&i.Country,
		&i.Region,
		&i.City,
		&i.Experiences,
		&i.FacebookCommunityID,
		&i.SlackCommunityID,
		&i.RememberToken,
		&i.ShortBio,
		&i.EmailVerified,
		&i.Location,
		&i.LastSeenAt,
		&i.LegalAcceptedAt,
		&i.EmailNewsletter,
		&i.FailedAttempts,
		&i.UnlockToken,
		&i.LockedAt,
		&i.ShortBioFormat,
		&i.Attachments,
		&i.CurrentSignInIp,
		&i.LastSignInIp,
		&i.SecretToken,
		&i.ContentLocale,
		&i.Bot,
		&i.LinkPreviews,
		&i.EmailCatchUpDay,
		&i.DateTimePref,
	)
	return i, err
}
